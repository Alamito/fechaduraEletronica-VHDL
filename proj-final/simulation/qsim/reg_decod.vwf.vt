// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2023 10:23:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    reg_decod
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reg_decod_vlg_sample_tst(
	btn_dir,
	Btn_esq,
	btn_mid,
	change_pass,
	CLK,
	close_safe,
	D0,
	D1,
	D2,
	D3,
	sampler_tx
);
input  btn_dir;
input  Btn_esq;
input  btn_mid;
input  change_pass;
input  CLK;
input  close_safe;
input  D0;
input  D1;
input  D2;
input  D3;
output sampler_tx;

reg sample;
time current_time;
always @(btn_dir or Btn_esq or btn_mid or change_pass or CLK or close_safe or D0 or D1 or D2 or D3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module reg_decod_vlg_check_tst (
	S,
	sampler_rx
);
input [3:0] S;
input sampler_rx;

reg [3:0] S_expected;

reg [3:0] S_prev;

reg [3:0] S_expected_prev;

reg [3:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	S_expected_prev = S_expected;
end


// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// generate trigger
always @(S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S = %b | ",S_expected_prev);
	$display("| real S = %b | ",S_prev);
`endif
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module reg_decod_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_dir;
reg Btn_esq;
reg btn_mid;
reg change_pass;
reg CLK;
reg close_safe;
reg D0;
reg D1;
reg D2;
reg D3;
// wires                                               
wire [3:0] S;

wire sampler;                             

// assign statements (if any)                          
reg_decod i1 (
// port map - connection between master ports and signals/registers   
	.btn_dir(btn_dir),
	.Btn_esq(Btn_esq),
	.btn_mid(btn_mid),
	.change_pass(change_pass),
	.CLK(CLK),
	.close_safe(close_safe),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.S(S)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// btn_dir
initial
begin
	btn_dir = 1'b0;
	btn_dir = #130000 1'b1;
	btn_dir = #40000 1'b0;
	btn_dir = #330000 1'b1;
	btn_dir = #40000 1'b0;
end 

// Btn_esq
initial
begin
	Btn_esq = 1'b0;
end 

// btn_mid
initial
begin
	btn_mid = 1'b0;
end 

// change_pass
initial
begin
	change_pass = 1'b0;
	change_pass = #130000 1'b1;
	change_pass = #40000 1'b0;
	change_pass = #330000 1'b1;
	change_pass = #50000 1'b0;
end 

// close_safe
initial
begin
	close_safe = 1'b0;
end 

// D0
initial
begin
	D0 = 1'b0;
	D0 = #130000 1'b1;
	D0 = #50000 1'b0;
end 

// D1
initial
begin
	D1 = 1'b0;
	D1 = #510000 1'b1;
	D1 = #40000 1'b0;
end 

// D2
initial
begin
	D2 = 1'b0;
	D2 = #130000 1'b1;
	D2 = #60000 1'b0;
	D2 = #320000 1'b1;
	D2 = #40000 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
	D3 = #510000 1'b1;
	D3 = #40000 1'b0;
end 

reg_decod_vlg_sample_tst tb_sample (
	.btn_dir(btn_dir),
	.Btn_esq(Btn_esq),
	.btn_mid(btn_mid),
	.change_pass(change_pass),
	.CLK(CLK),
	.close_safe(close_safe),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.sampler_tx(sampler)
);

reg_decod_vlg_check_tst tb_out(
	.S(S),
	.sampler_rx(sampler)
);
endmodule

