// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2023 11:39:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    proj_final_16bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module proj_final_16bits_vlg_sample_tst(
	btn_inc,
	btn_seleciona,
	btn_troca,
	change_pass,
	CLK,
	sampler_tx
);
input  btn_inc;
input  btn_seleciona;
input  btn_troca;
input  change_pass;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(btn_inc or btn_seleciona or btn_troca or change_pass or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module proj_final_16bits_vlg_check_tst (
	B1,
	B2,
	C1,
	C2,
	CD,
	CE,
	CMD,
	CME,
	comp,
	display_ponto1,
	display_ponto2,
	display_ponto3,
	display_ponto4,
	E1,
	F2,
	H1,
	J1,
	J2,
	J3,
	LOAD_COFRE,
	ND,
	NE,
	NMD,
	NME,
	SAIDAD,
	SAIDAE,
	SAIDAMD,
	SAIDAME,
	sampler_rx
);
input  B1;
input  B2;
input  C1;
input  C2;
input [3:0] CD;
input [3:0] CE;
input [3:0] CMD;
input [3:0] CME;
input  comp;
input  display_ponto1;
input  display_ponto2;
input  display_ponto3;
input  display_ponto4;
input  E1;
input  F2;
input  H1;
input  J1;
input  J2;
input  J3;
input  LOAD_COFRE;
input [3:0] ND;
input [3:0] NE;
input [3:0] NMD;
input [3:0] NME;
input [6:0] SAIDAD;
input [6:0] SAIDAE;
input [6:0] SAIDAMD;
input [6:0] SAIDAME;
input sampler_rx;

reg  B1_expected;
reg  B2_expected;
reg  C1_expected;
reg  C2_expected;
reg [3:0] CD_expected;
reg [3:0] CE_expected;
reg [3:0] CMD_expected;
reg [3:0] CME_expected;
reg  comp_expected;
reg  display_ponto1_expected;
reg  display_ponto2_expected;
reg  display_ponto3_expected;
reg  display_ponto4_expected;
reg  E1_expected;
reg  F2_expected;
reg  H1_expected;
reg  J1_expected;
reg  J2_expected;
reg  J3_expected;
reg  LOAD_COFRE_expected;
reg [3:0] ND_expected;
reg [3:0] NE_expected;
reg [3:0] NMD_expected;
reg [3:0] NME_expected;
reg [6:0] SAIDAD_expected;
reg [6:0] SAIDAE_expected;
reg [6:0] SAIDAMD_expected;
reg [6:0] SAIDAME_expected;

reg  B1_prev;
reg  B2_prev;
reg  C1_prev;
reg  C2_prev;
reg [3:0] CD_prev;
reg [3:0] CE_prev;
reg [3:0] CMD_prev;
reg [3:0] CME_prev;
reg  comp_prev;
reg  display_ponto1_prev;
reg  display_ponto2_prev;
reg  display_ponto3_prev;
reg  display_ponto4_prev;
reg  E1_prev;
reg  F2_prev;
reg  H1_prev;
reg  J1_prev;
reg  J2_prev;
reg  J3_prev;
reg  LOAD_COFRE_prev;
reg [3:0] ND_prev;
reg [3:0] NE_prev;
reg [3:0] NMD_prev;
reg [3:0] NME_prev;
reg [6:0] SAIDAD_prev;
reg [6:0] SAIDAE_prev;
reg [6:0] SAIDAMD_prev;
reg [6:0] SAIDAME_prev;

reg  B1_expected_prev;
reg  B2_expected_prev;
reg  C1_expected_prev;
reg  C2_expected_prev;
reg [3:0] CD_expected_prev;
reg [3:0] CE_expected_prev;
reg [3:0] CMD_expected_prev;
reg [3:0] CME_expected_prev;
reg  display_ponto1_expected_prev;
reg  display_ponto2_expected_prev;
reg  display_ponto3_expected_prev;
reg  display_ponto4_expected_prev;
reg  LOAD_COFRE_expected_prev;
reg [3:0] ND_expected_prev;
reg [3:0] NE_expected_prev;
reg [3:0] NMD_expected_prev;
reg [3:0] NME_expected_prev;
reg [6:0] SAIDAD_expected_prev;
reg [6:0] SAIDAE_expected_prev;
reg [6:0] SAIDAMD_expected_prev;
reg [6:0] SAIDAME_expected_prev;

reg  last_B1_exp;
reg  last_B2_exp;
reg  last_C1_exp;
reg  last_C2_exp;
reg [3:0] last_CD_exp;
reg [3:0] last_CE_exp;
reg [3:0] last_CMD_exp;
reg [3:0] last_CME_exp;
reg  last_display_ponto1_exp;
reg  last_display_ponto2_exp;
reg  last_display_ponto3_exp;
reg  last_display_ponto4_exp;
reg  last_LOAD_COFRE_exp;
reg [3:0] last_ND_exp;
reg [3:0] last_NE_exp;
reg [3:0] last_NMD_exp;
reg [3:0] last_NME_exp;
reg [6:0] last_SAIDAD_exp;
reg [6:0] last_SAIDAE_exp;
reg [6:0] last_SAIDAMD_exp;
reg [6:0] last_SAIDAME_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:28] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 28'b1;
end

// update real /o prevs

always @(trigger)
begin
	B1_prev = B1;
	B2_prev = B2;
	C1_prev = C1;
	C2_prev = C2;
	CD_prev = CD;
	CE_prev = CE;
	CMD_prev = CMD;
	CME_prev = CME;
	comp_prev = comp;
	display_ponto1_prev = display_ponto1;
	display_ponto2_prev = display_ponto2;
	display_ponto3_prev = display_ponto3;
	display_ponto4_prev = display_ponto4;
	E1_prev = E1;
	F2_prev = F2;
	H1_prev = H1;
	J1_prev = J1;
	J2_prev = J2;
	J3_prev = J3;
	LOAD_COFRE_prev = LOAD_COFRE;
	ND_prev = ND;
	NE_prev = NE;
	NMD_prev = NMD;
	NME_prev = NME;
	SAIDAD_prev = SAIDAD;
	SAIDAE_prev = SAIDAE;
	SAIDAMD_prev = SAIDAMD;
	SAIDAME_prev = SAIDAME;
end

// update expected /o prevs

always @(trigger)
begin
	B1_expected_prev = B1_expected;
	B2_expected_prev = B2_expected;
	C1_expected_prev = C1_expected;
	C2_expected_prev = C2_expected;
	CD_expected_prev = CD_expected;
	CE_expected_prev = CE_expected;
	CMD_expected_prev = CMD_expected;
	CME_expected_prev = CME_expected;
	display_ponto1_expected_prev = display_ponto1_expected;
	display_ponto2_expected_prev = display_ponto2_expected;
	display_ponto3_expected_prev = display_ponto3_expected;
	display_ponto4_expected_prev = display_ponto4_expected;
	LOAD_COFRE_expected_prev = LOAD_COFRE_expected;
	ND_expected_prev = ND_expected;
	NE_expected_prev = NE_expected;
	NMD_expected_prev = NMD_expected;
	NME_expected_prev = NME_expected;
	SAIDAD_expected_prev = SAIDAD_expected;
	SAIDAE_expected_prev = SAIDAE_expected;
	SAIDAMD_expected_prev = SAIDAMD_expected;
	SAIDAME_expected_prev = SAIDAME_expected;
end



// expected B1
initial
begin
	B1_expected = 1'bX;
end 

// expected B2
initial
begin
	B2_expected = 1'bX;
end 

// expected C1
initial
begin
	C1_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 
// expected CD[ 3 ]
initial
begin
	CD_expected[3] = 1'bX;
end 
// expected CD[ 2 ]
initial
begin
	CD_expected[2] = 1'bX;
end 
// expected CD[ 1 ]
initial
begin
	CD_expected[1] = 1'bX;
end 
// expected CD[ 0 ]
initial
begin
	CD_expected[0] = 1'bX;
end 
// expected CE[ 3 ]
initial
begin
	CE_expected[3] = 1'bX;
end 
// expected CE[ 2 ]
initial
begin
	CE_expected[2] = 1'bX;
end 
// expected CE[ 1 ]
initial
begin
	CE_expected[1] = 1'bX;
end 
// expected CE[ 0 ]
initial
begin
	CE_expected[0] = 1'bX;
end 
// expected CMD[ 3 ]
initial
begin
	CMD_expected[3] = 1'bX;
end 
// expected CMD[ 2 ]
initial
begin
	CMD_expected[2] = 1'bX;
end 
// expected CMD[ 1 ]
initial
begin
	CMD_expected[1] = 1'bX;
end 
// expected CMD[ 0 ]
initial
begin
	CMD_expected[0] = 1'bX;
end 
// expected CME[ 3 ]
initial
begin
	CME_expected[3] = 1'bX;
end 
// expected CME[ 2 ]
initial
begin
	CME_expected[2] = 1'bX;
end 
// expected CME[ 1 ]
initial
begin
	CME_expected[1] = 1'bX;
end 
// expected CME[ 0 ]
initial
begin
	CME_expected[0] = 1'bX;
end 

// expected display_ponto1
initial
begin
	display_ponto1_expected = 1'bX;
end 

// expected display_ponto2
initial
begin
	display_ponto2_expected = 1'bX;
end 

// expected display_ponto3
initial
begin
	display_ponto3_expected = 1'bX;
end 

// expected display_ponto4
initial
begin
	display_ponto4_expected = 1'bX;
end 

// expected LOAD_COFRE
initial
begin
	LOAD_COFRE_expected = 1'bX;
end 
// expected ND[ 3 ]
initial
begin
	ND_expected[3] = 1'bX;
end 
// expected ND[ 2 ]
initial
begin
	ND_expected[2] = 1'bX;
end 
// expected ND[ 1 ]
initial
begin
	ND_expected[1] = 1'bX;
end 
// expected ND[ 0 ]
initial
begin
	ND_expected[0] = 1'bX;
end 
// expected NE[ 3 ]
initial
begin
	NE_expected[3] = 1'bX;
end 
// expected NE[ 2 ]
initial
begin
	NE_expected[2] = 1'bX;
end 
// expected NE[ 1 ]
initial
begin
	NE_expected[1] = 1'bX;
end 
// expected NE[ 0 ]
initial
begin
	NE_expected[0] = 1'bX;
end 
// expected NMD[ 3 ]
initial
begin
	NMD_expected[3] = 1'bX;
end 
// expected NMD[ 2 ]
initial
begin
	NMD_expected[2] = 1'bX;
end 
// expected NMD[ 1 ]
initial
begin
	NMD_expected[1] = 1'bX;
end 
// expected NMD[ 0 ]
initial
begin
	NMD_expected[0] = 1'bX;
end 
// expected NME[ 3 ]
initial
begin
	NME_expected[3] = 1'bX;
end 
// expected NME[ 2 ]
initial
begin
	NME_expected[2] = 1'bX;
end 
// expected NME[ 1 ]
initial
begin
	NME_expected[1] = 1'bX;
end 
// expected NME[ 0 ]
initial
begin
	NME_expected[0] = 1'bX;
end 
// expected SAIDAD[ 6 ]
initial
begin
	SAIDAD_expected[6] = 1'bX;
end 
// expected SAIDAD[ 5 ]
initial
begin
	SAIDAD_expected[5] = 1'bX;
end 
// expected SAIDAD[ 4 ]
initial
begin
	SAIDAD_expected[4] = 1'bX;
end 
// expected SAIDAD[ 3 ]
initial
begin
	SAIDAD_expected[3] = 1'bX;
end 
// expected SAIDAD[ 2 ]
initial
begin
	SAIDAD_expected[2] = 1'bX;
end 
// expected SAIDAD[ 1 ]
initial
begin
	SAIDAD_expected[1] = 1'bX;
end 
// expected SAIDAD[ 0 ]
initial
begin
	SAIDAD_expected[0] = 1'bX;
end 
// expected SAIDAE[ 6 ]
initial
begin
	SAIDAE_expected[6] = 1'bX;
end 
// expected SAIDAE[ 5 ]
initial
begin
	SAIDAE_expected[5] = 1'bX;
end 
// expected SAIDAE[ 4 ]
initial
begin
	SAIDAE_expected[4] = 1'bX;
end 
// expected SAIDAE[ 3 ]
initial
begin
	SAIDAE_expected[3] = 1'bX;
end 
// expected SAIDAE[ 2 ]
initial
begin
	SAIDAE_expected[2] = 1'bX;
end 
// expected SAIDAE[ 1 ]
initial
begin
	SAIDAE_expected[1] = 1'bX;
end 
// expected SAIDAE[ 0 ]
initial
begin
	SAIDAE_expected[0] = 1'bX;
end 
// expected SAIDAMD[ 6 ]
initial
begin
	SAIDAMD_expected[6] = 1'bX;
end 
// expected SAIDAMD[ 5 ]
initial
begin
	SAIDAMD_expected[5] = 1'bX;
end 
// expected SAIDAMD[ 4 ]
initial
begin
	SAIDAMD_expected[4] = 1'bX;
end 
// expected SAIDAMD[ 3 ]
initial
begin
	SAIDAMD_expected[3] = 1'bX;
end 
// expected SAIDAMD[ 2 ]
initial
begin
	SAIDAMD_expected[2] = 1'bX;
end 
// expected SAIDAMD[ 1 ]
initial
begin
	SAIDAMD_expected[1] = 1'bX;
end 
// expected SAIDAMD[ 0 ]
initial
begin
	SAIDAMD_expected[0] = 1'bX;
end 
// expected SAIDAME[ 6 ]
initial
begin
	SAIDAME_expected[6] = 1'bX;
end 
// expected SAIDAME[ 5 ]
initial
begin
	SAIDAME_expected[5] = 1'bX;
end 
// expected SAIDAME[ 4 ]
initial
begin
	SAIDAME_expected[4] = 1'bX;
end 
// expected SAIDAME[ 3 ]
initial
begin
	SAIDAME_expected[3] = 1'bX;
end 
// expected SAIDAME[ 2 ]
initial
begin
	SAIDAME_expected[2] = 1'bX;
end 
// expected SAIDAME[ 1 ]
initial
begin
	SAIDAME_expected[1] = 1'bX;
end 
// expected SAIDAME[ 0 ]
initial
begin
	SAIDAME_expected[0] = 1'bX;
end 
// generate trigger
always @(B1_expected or B1 or B2_expected or B2 or C1_expected or C1 or C2_expected or C2 or CD_expected or CD or CE_expected or CE or CMD_expected or CMD or CME_expected or CME or comp_expected or comp or display_ponto1_expected or display_ponto1 or display_ponto2_expected or display_ponto2 or display_ponto3_expected or display_ponto3 or display_ponto4_expected or display_ponto4 or E1_expected or E1 or F2_expected or F2 or H1_expected or H1 or J1_expected or J1 or J2_expected or J2 or J3_expected or J3 or LOAD_COFRE_expected or LOAD_COFRE or ND_expected or ND or NE_expected or NE or NMD_expected or NMD or NME_expected or NME or SAIDAD_expected or SAIDAD or SAIDAE_expected or SAIDAE or SAIDAMD_expected or SAIDAMD or SAIDAME_expected or SAIDAME)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B1 = %b | expected B2 = %b | expected C1 = %b | expected C2 = %b | expected CD = %b | expected CE = %b | expected CMD = %b | expected CME = %b | expected comp = %b | expected display_ponto1 = %b | expected display_ponto2 = %b | expected display_ponto3 = %b | expected display_ponto4 = %b | expected E1 = %b | expected F2 = %b | expected H1 = %b | expected J1 = %b | expected J2 = %b | expected J3 = %b | expected LOAD_COFRE = %b | expected ND = %b | expected NE = %b | expected NMD = %b | expected NME = %b | expected SAIDAD = %b | expected SAIDAE = %b | expected SAIDAMD = %b | expected SAIDAME = %b | ",B1_expected_prev,B2_expected_prev,C1_expected_prev,C2_expected_prev,CD_expected_prev,CE_expected_prev,CMD_expected_prev,CME_expected_prev,comp_expected_prev,display_ponto1_expected_prev,display_ponto2_expected_prev,display_ponto3_expected_prev,display_ponto4_expected_prev,E1_expected_prev,F2_expected_prev,H1_expected_prev,J1_expected_prev,J2_expected_prev,J3_expected_prev,LOAD_COFRE_expected_prev,ND_expected_prev,NE_expected_prev,NMD_expected_prev,NME_expected_prev,SAIDAD_expected_prev,SAIDAE_expected_prev,SAIDAMD_expected_prev,SAIDAME_expected_prev);
	$display("| real B1 = %b | real B2 = %b | real C1 = %b | real C2 = %b | real CD = %b | real CE = %b | real CMD = %b | real CME = %b | real comp = %b | real display_ponto1 = %b | real display_ponto2 = %b | real display_ponto3 = %b | real display_ponto4 = %b | real E1 = %b | real F2 = %b | real H1 = %b | real J1 = %b | real J2 = %b | real J3 = %b | real LOAD_COFRE = %b | real ND = %b | real NE = %b | real NMD = %b | real NME = %b | real SAIDAD = %b | real SAIDAE = %b | real SAIDAMD = %b | real SAIDAME = %b | ",B1_prev,B2_prev,C1_prev,C2_prev,CD_prev,CE_prev,CMD_prev,CME_prev,comp_prev,display_ponto1_prev,display_ponto2_prev,display_ponto3_prev,display_ponto4_prev,E1_prev,F2_prev,H1_prev,J1_prev,J2_prev,J3_prev,LOAD_COFRE_prev,ND_prev,NE_prev,NMD_prev,NME_prev,SAIDAD_prev,SAIDAE_prev,SAIDAMD_prev,SAIDAME_prev);
`endif
	if (
		( B1_expected_prev !== 1'bx ) && ( B1_prev !== B1_expected_prev )
		&& ((B1_expected_prev !== last_B1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B1_expected_prev);
		$display ("     Real value = %b", B1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B1_exp = B1_expected_prev;
	end
	if (
		( B2_expected_prev !== 1'bx ) && ( B2_prev !== B2_expected_prev )
		&& ((B2_expected_prev !== last_B2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B2_expected_prev);
		$display ("     Real value = %b", B2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B2_exp = B2_expected_prev;
	end
	if (
		( C1_expected_prev !== 1'bx ) && ( C1_prev !== C1_expected_prev )
		&& ((C1_expected_prev !== last_C1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1_expected_prev);
		$display ("     Real value = %b", C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C1_exp = C1_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( CD_expected_prev[0] !== 1'bx ) && ( CD_prev[0] !== CD_expected_prev[0] )
		&& ((CD_expected_prev[0] !== last_CD_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CD_expected_prev);
		$display ("     Real value = %b", CD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CD_exp[0] = CD_expected_prev[0];
	end
	if (
		( CD_expected_prev[1] !== 1'bx ) && ( CD_prev[1] !== CD_expected_prev[1] )
		&& ((CD_expected_prev[1] !== last_CD_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CD_expected_prev);
		$display ("     Real value = %b", CD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CD_exp[1] = CD_expected_prev[1];
	end
	if (
		( CD_expected_prev[2] !== 1'bx ) && ( CD_prev[2] !== CD_expected_prev[2] )
		&& ((CD_expected_prev[2] !== last_CD_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CD_expected_prev);
		$display ("     Real value = %b", CD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CD_exp[2] = CD_expected_prev[2];
	end
	if (
		( CD_expected_prev[3] !== 1'bx ) && ( CD_prev[3] !== CD_expected_prev[3] )
		&& ((CD_expected_prev[3] !== last_CD_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CD_expected_prev);
		$display ("     Real value = %b", CD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CD_exp[3] = CD_expected_prev[3];
	end
	if (
		( CE_expected_prev[0] !== 1'bx ) && ( CE_prev[0] !== CE_expected_prev[0] )
		&& ((CE_expected_prev[0] !== last_CE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE_expected_prev);
		$display ("     Real value = %b", CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CE_exp[0] = CE_expected_prev[0];
	end
	if (
		( CE_expected_prev[1] !== 1'bx ) && ( CE_prev[1] !== CE_expected_prev[1] )
		&& ((CE_expected_prev[1] !== last_CE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE_expected_prev);
		$display ("     Real value = %b", CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CE_exp[1] = CE_expected_prev[1];
	end
	if (
		( CE_expected_prev[2] !== 1'bx ) && ( CE_prev[2] !== CE_expected_prev[2] )
		&& ((CE_expected_prev[2] !== last_CE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE_expected_prev);
		$display ("     Real value = %b", CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CE_exp[2] = CE_expected_prev[2];
	end
	if (
		( CE_expected_prev[3] !== 1'bx ) && ( CE_prev[3] !== CE_expected_prev[3] )
		&& ((CE_expected_prev[3] !== last_CE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE_expected_prev);
		$display ("     Real value = %b", CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CE_exp[3] = CE_expected_prev[3];
	end
	if (
		( CMD_expected_prev[0] !== 1'bx ) && ( CMD_prev[0] !== CMD_expected_prev[0] )
		&& ((CMD_expected_prev[0] !== last_CMD_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CMD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CMD_expected_prev);
		$display ("     Real value = %b", CMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CMD_exp[0] = CMD_expected_prev[0];
	end
	if (
		( CMD_expected_prev[1] !== 1'bx ) && ( CMD_prev[1] !== CMD_expected_prev[1] )
		&& ((CMD_expected_prev[1] !== last_CMD_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CMD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CMD_expected_prev);
		$display ("     Real value = %b", CMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CMD_exp[1] = CMD_expected_prev[1];
	end
	if (
		( CMD_expected_prev[2] !== 1'bx ) && ( CMD_prev[2] !== CMD_expected_prev[2] )
		&& ((CMD_expected_prev[2] !== last_CMD_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CMD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CMD_expected_prev);
		$display ("     Real value = %b", CMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CMD_exp[2] = CMD_expected_prev[2];
	end
	if (
		( CMD_expected_prev[3] !== 1'bx ) && ( CMD_prev[3] !== CMD_expected_prev[3] )
		&& ((CMD_expected_prev[3] !== last_CMD_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CMD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CMD_expected_prev);
		$display ("     Real value = %b", CMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CMD_exp[3] = CMD_expected_prev[3];
	end
	if (
		( CME_expected_prev[0] !== 1'bx ) && ( CME_prev[0] !== CME_expected_prev[0] )
		&& ((CME_expected_prev[0] !== last_CME_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CME[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CME_expected_prev);
		$display ("     Real value = %b", CME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_CME_exp[0] = CME_expected_prev[0];
	end
	if (
		( CME_expected_prev[1] !== 1'bx ) && ( CME_prev[1] !== CME_expected_prev[1] )
		&& ((CME_expected_prev[1] !== last_CME_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CME[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CME_expected_prev);
		$display ("     Real value = %b", CME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_CME_exp[1] = CME_expected_prev[1];
	end
	if (
		( CME_expected_prev[2] !== 1'bx ) && ( CME_prev[2] !== CME_expected_prev[2] )
		&& ((CME_expected_prev[2] !== last_CME_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CME[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CME_expected_prev);
		$display ("     Real value = %b", CME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_CME_exp[2] = CME_expected_prev[2];
	end
	if (
		( CME_expected_prev[3] !== 1'bx ) && ( CME_prev[3] !== CME_expected_prev[3] )
		&& ((CME_expected_prev[3] !== last_CME_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CME[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CME_expected_prev);
		$display ("     Real value = %b", CME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_CME_exp[3] = CME_expected_prev[3];
	end
	if (
		( display_ponto1_expected_prev !== 1'bx ) && ( display_ponto1_prev !== display_ponto1_expected_prev )
		&& ((display_ponto1_expected_prev !== last_display_ponto1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_ponto1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_ponto1_expected_prev);
		$display ("     Real value = %b", display_ponto1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_display_ponto1_exp = display_ponto1_expected_prev;
	end
	if (
		( display_ponto2_expected_prev !== 1'bx ) && ( display_ponto2_prev !== display_ponto2_expected_prev )
		&& ((display_ponto2_expected_prev !== last_display_ponto2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_ponto2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_ponto2_expected_prev);
		$display ("     Real value = %b", display_ponto2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_display_ponto2_exp = display_ponto2_expected_prev;
	end
	if (
		( display_ponto3_expected_prev !== 1'bx ) && ( display_ponto3_prev !== display_ponto3_expected_prev )
		&& ((display_ponto3_expected_prev !== last_display_ponto3_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_ponto3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_ponto3_expected_prev);
		$display ("     Real value = %b", display_ponto3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_display_ponto3_exp = display_ponto3_expected_prev;
	end
	if (
		( display_ponto4_expected_prev !== 1'bx ) && ( display_ponto4_prev !== display_ponto4_expected_prev )
		&& ((display_ponto4_expected_prev !== last_display_ponto4_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_ponto4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_ponto4_expected_prev);
		$display ("     Real value = %b", display_ponto4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_display_ponto4_exp = display_ponto4_expected_prev;
	end
	if (
		( LOAD_COFRE_expected_prev !== 1'bx ) && ( LOAD_COFRE_prev !== LOAD_COFRE_expected_prev )
		&& ((LOAD_COFRE_expected_prev !== last_LOAD_COFRE_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_COFRE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_COFRE_expected_prev);
		$display ("     Real value = %b", LOAD_COFRE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_LOAD_COFRE_exp = LOAD_COFRE_expected_prev;
	end
	if (
		( ND_expected_prev[0] !== 1'bx ) && ( ND_prev[0] !== ND_expected_prev[0] )
		&& ((ND_expected_prev[0] !== last_ND_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ND_exp[0] = ND_expected_prev[0];
	end
	if (
		( ND_expected_prev[1] !== 1'bx ) && ( ND_prev[1] !== ND_expected_prev[1] )
		&& ((ND_expected_prev[1] !== last_ND_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ND_exp[1] = ND_expected_prev[1];
	end
	if (
		( ND_expected_prev[2] !== 1'bx ) && ( ND_prev[2] !== ND_expected_prev[2] )
		&& ((ND_expected_prev[2] !== last_ND_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ND_exp[2] = ND_expected_prev[2];
	end
	if (
		( ND_expected_prev[3] !== 1'bx ) && ( ND_prev[3] !== ND_expected_prev[3] )
		&& ((ND_expected_prev[3] !== last_ND_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ND_exp[3] = ND_expected_prev[3];
	end
	if (
		( NE_expected_prev[0] !== 1'bx ) && ( NE_prev[0] !== NE_expected_prev[0] )
		&& ((NE_expected_prev[0] !== last_NE_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NE_expected_prev);
		$display ("     Real value = %b", NE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_NE_exp[0] = NE_expected_prev[0];
	end
	if (
		( NE_expected_prev[1] !== 1'bx ) && ( NE_prev[1] !== NE_expected_prev[1] )
		&& ((NE_expected_prev[1] !== last_NE_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NE_expected_prev);
		$display ("     Real value = %b", NE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_NE_exp[1] = NE_expected_prev[1];
	end
	if (
		( NE_expected_prev[2] !== 1'bx ) && ( NE_prev[2] !== NE_expected_prev[2] )
		&& ((NE_expected_prev[2] !== last_NE_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NE_expected_prev);
		$display ("     Real value = %b", NE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_NE_exp[2] = NE_expected_prev[2];
	end
	if (
		( NE_expected_prev[3] !== 1'bx ) && ( NE_prev[3] !== NE_expected_prev[3] )
		&& ((NE_expected_prev[3] !== last_NE_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NE_expected_prev);
		$display ("     Real value = %b", NE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_NE_exp[3] = NE_expected_prev[3];
	end
	if (
		( NMD_expected_prev[0] !== 1'bx ) && ( NMD_prev[0] !== NMD_expected_prev[0] )
		&& ((NMD_expected_prev[0] !== last_NMD_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NMD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NMD_expected_prev);
		$display ("     Real value = %b", NMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_NMD_exp[0] = NMD_expected_prev[0];
	end
	if (
		( NMD_expected_prev[1] !== 1'bx ) && ( NMD_prev[1] !== NMD_expected_prev[1] )
		&& ((NMD_expected_prev[1] !== last_NMD_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NMD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NMD_expected_prev);
		$display ("     Real value = %b", NMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_NMD_exp[1] = NMD_expected_prev[1];
	end
	if (
		( NMD_expected_prev[2] !== 1'bx ) && ( NMD_prev[2] !== NMD_expected_prev[2] )
		&& ((NMD_expected_prev[2] !== last_NMD_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NMD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NMD_expected_prev);
		$display ("     Real value = %b", NMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_NMD_exp[2] = NMD_expected_prev[2];
	end
	if (
		( NMD_expected_prev[3] !== 1'bx ) && ( NMD_prev[3] !== NMD_expected_prev[3] )
		&& ((NMD_expected_prev[3] !== last_NMD_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NMD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NMD_expected_prev);
		$display ("     Real value = %b", NMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_NMD_exp[3] = NMD_expected_prev[3];
	end
	if (
		( NME_expected_prev[0] !== 1'bx ) && ( NME_prev[0] !== NME_expected_prev[0] )
		&& ((NME_expected_prev[0] !== last_NME_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NME[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NME_expected_prev);
		$display ("     Real value = %b", NME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_NME_exp[0] = NME_expected_prev[0];
	end
	if (
		( NME_expected_prev[1] !== 1'bx ) && ( NME_prev[1] !== NME_expected_prev[1] )
		&& ((NME_expected_prev[1] !== last_NME_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NME[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NME_expected_prev);
		$display ("     Real value = %b", NME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_NME_exp[1] = NME_expected_prev[1];
	end
	if (
		( NME_expected_prev[2] !== 1'bx ) && ( NME_prev[2] !== NME_expected_prev[2] )
		&& ((NME_expected_prev[2] !== last_NME_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NME[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NME_expected_prev);
		$display ("     Real value = %b", NME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_NME_exp[2] = NME_expected_prev[2];
	end
	if (
		( NME_expected_prev[3] !== 1'bx ) && ( NME_prev[3] !== NME_expected_prev[3] )
		&& ((NME_expected_prev[3] !== last_NME_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NME[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NME_expected_prev);
		$display ("     Real value = %b", NME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_NME_exp[3] = NME_expected_prev[3];
	end
	if (
		( SAIDAD_expected_prev[0] !== 1'bx ) && ( SAIDAD_prev[0] !== SAIDAD_expected_prev[0] )
		&& ((SAIDAD_expected_prev[0] !== last_SAIDAD_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[0] = SAIDAD_expected_prev[0];
	end
	if (
		( SAIDAD_expected_prev[1] !== 1'bx ) && ( SAIDAD_prev[1] !== SAIDAD_expected_prev[1] )
		&& ((SAIDAD_expected_prev[1] !== last_SAIDAD_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[1] = SAIDAD_expected_prev[1];
	end
	if (
		( SAIDAD_expected_prev[2] !== 1'bx ) && ( SAIDAD_prev[2] !== SAIDAD_expected_prev[2] )
		&& ((SAIDAD_expected_prev[2] !== last_SAIDAD_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[2] = SAIDAD_expected_prev[2];
	end
	if (
		( SAIDAD_expected_prev[3] !== 1'bx ) && ( SAIDAD_prev[3] !== SAIDAD_expected_prev[3] )
		&& ((SAIDAD_expected_prev[3] !== last_SAIDAD_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[3] = SAIDAD_expected_prev[3];
	end
	if (
		( SAIDAD_expected_prev[4] !== 1'bx ) && ( SAIDAD_prev[4] !== SAIDAD_expected_prev[4] )
		&& ((SAIDAD_expected_prev[4] !== last_SAIDAD_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[4] = SAIDAD_expected_prev[4];
	end
	if (
		( SAIDAD_expected_prev[5] !== 1'bx ) && ( SAIDAD_prev[5] !== SAIDAD_expected_prev[5] )
		&& ((SAIDAD_expected_prev[5] !== last_SAIDAD_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[5] = SAIDAD_expected_prev[5];
	end
	if (
		( SAIDAD_expected_prev[6] !== 1'bx ) && ( SAIDAD_prev[6] !== SAIDAD_expected_prev[6] )
		&& ((SAIDAD_expected_prev[6] !== last_SAIDAD_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAD_expected_prev);
		$display ("     Real value = %b", SAIDAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_SAIDAD_exp[6] = SAIDAD_expected_prev[6];
	end
	if (
		( SAIDAE_expected_prev[0] !== 1'bx ) && ( SAIDAE_prev[0] !== SAIDAE_expected_prev[0] )
		&& ((SAIDAE_expected_prev[0] !== last_SAIDAE_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[0] = SAIDAE_expected_prev[0];
	end
	if (
		( SAIDAE_expected_prev[1] !== 1'bx ) && ( SAIDAE_prev[1] !== SAIDAE_expected_prev[1] )
		&& ((SAIDAE_expected_prev[1] !== last_SAIDAE_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[1] = SAIDAE_expected_prev[1];
	end
	if (
		( SAIDAE_expected_prev[2] !== 1'bx ) && ( SAIDAE_prev[2] !== SAIDAE_expected_prev[2] )
		&& ((SAIDAE_expected_prev[2] !== last_SAIDAE_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[2] = SAIDAE_expected_prev[2];
	end
	if (
		( SAIDAE_expected_prev[3] !== 1'bx ) && ( SAIDAE_prev[3] !== SAIDAE_expected_prev[3] )
		&& ((SAIDAE_expected_prev[3] !== last_SAIDAE_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[3] = SAIDAE_expected_prev[3];
	end
	if (
		( SAIDAE_expected_prev[4] !== 1'bx ) && ( SAIDAE_prev[4] !== SAIDAE_expected_prev[4] )
		&& ((SAIDAE_expected_prev[4] !== last_SAIDAE_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[4] = SAIDAE_expected_prev[4];
	end
	if (
		( SAIDAE_expected_prev[5] !== 1'bx ) && ( SAIDAE_prev[5] !== SAIDAE_expected_prev[5] )
		&& ((SAIDAE_expected_prev[5] !== last_SAIDAE_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[5] = SAIDAE_expected_prev[5];
	end
	if (
		( SAIDAE_expected_prev[6] !== 1'bx ) && ( SAIDAE_prev[6] !== SAIDAE_expected_prev[6] )
		&& ((SAIDAE_expected_prev[6] !== last_SAIDAE_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAE_expected_prev);
		$display ("     Real value = %b", SAIDAE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_SAIDAE_exp[6] = SAIDAE_expected_prev[6];
	end
	if (
		( SAIDAMD_expected_prev[0] !== 1'bx ) && ( SAIDAMD_prev[0] !== SAIDAMD_expected_prev[0] )
		&& ((SAIDAMD_expected_prev[0] !== last_SAIDAMD_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[0] = SAIDAMD_expected_prev[0];
	end
	if (
		( SAIDAMD_expected_prev[1] !== 1'bx ) && ( SAIDAMD_prev[1] !== SAIDAMD_expected_prev[1] )
		&& ((SAIDAMD_expected_prev[1] !== last_SAIDAMD_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[1] = SAIDAMD_expected_prev[1];
	end
	if (
		( SAIDAMD_expected_prev[2] !== 1'bx ) && ( SAIDAMD_prev[2] !== SAIDAMD_expected_prev[2] )
		&& ((SAIDAMD_expected_prev[2] !== last_SAIDAMD_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[2] = SAIDAMD_expected_prev[2];
	end
	if (
		( SAIDAMD_expected_prev[3] !== 1'bx ) && ( SAIDAMD_prev[3] !== SAIDAMD_expected_prev[3] )
		&& ((SAIDAMD_expected_prev[3] !== last_SAIDAMD_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[3] = SAIDAMD_expected_prev[3];
	end
	if (
		( SAIDAMD_expected_prev[4] !== 1'bx ) && ( SAIDAMD_prev[4] !== SAIDAMD_expected_prev[4] )
		&& ((SAIDAMD_expected_prev[4] !== last_SAIDAMD_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[4] = SAIDAMD_expected_prev[4];
	end
	if (
		( SAIDAMD_expected_prev[5] !== 1'bx ) && ( SAIDAMD_prev[5] !== SAIDAMD_expected_prev[5] )
		&& ((SAIDAMD_expected_prev[5] !== last_SAIDAMD_exp[5]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[5] = SAIDAMD_expected_prev[5];
	end
	if (
		( SAIDAMD_expected_prev[6] !== 1'bx ) && ( SAIDAMD_prev[6] !== SAIDAMD_expected_prev[6] )
		&& ((SAIDAMD_expected_prev[6] !== last_SAIDAMD_exp[6]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAMD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAMD_expected_prev);
		$display ("     Real value = %b", SAIDAMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_SAIDAMD_exp[6] = SAIDAMD_expected_prev[6];
	end
	if (
		( SAIDAME_expected_prev[0] !== 1'bx ) && ( SAIDAME_prev[0] !== SAIDAME_expected_prev[0] )
		&& ((SAIDAME_expected_prev[0] !== last_SAIDAME_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[0] = SAIDAME_expected_prev[0];
	end
	if (
		( SAIDAME_expected_prev[1] !== 1'bx ) && ( SAIDAME_prev[1] !== SAIDAME_expected_prev[1] )
		&& ((SAIDAME_expected_prev[1] !== last_SAIDAME_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[1] = SAIDAME_expected_prev[1];
	end
	if (
		( SAIDAME_expected_prev[2] !== 1'bx ) && ( SAIDAME_prev[2] !== SAIDAME_expected_prev[2] )
		&& ((SAIDAME_expected_prev[2] !== last_SAIDAME_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[2] = SAIDAME_expected_prev[2];
	end
	if (
		( SAIDAME_expected_prev[3] !== 1'bx ) && ( SAIDAME_prev[3] !== SAIDAME_expected_prev[3] )
		&& ((SAIDAME_expected_prev[3] !== last_SAIDAME_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[3] = SAIDAME_expected_prev[3];
	end
	if (
		( SAIDAME_expected_prev[4] !== 1'bx ) && ( SAIDAME_prev[4] !== SAIDAME_expected_prev[4] )
		&& ((SAIDAME_expected_prev[4] !== last_SAIDAME_exp[4]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[4] = SAIDAME_expected_prev[4];
	end
	if (
		( SAIDAME_expected_prev[5] !== 1'bx ) && ( SAIDAME_prev[5] !== SAIDAME_expected_prev[5] )
		&& ((SAIDAME_expected_prev[5] !== last_SAIDAME_exp[5]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[5] = SAIDAME_expected_prev[5];
	end
	if (
		( SAIDAME_expected_prev[6] !== 1'bx ) && ( SAIDAME_prev[6] !== SAIDAME_expected_prev[6] )
		&& ((SAIDAME_expected_prev[6] !== last_SAIDAME_exp[6]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDAME[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDAME_expected_prev);
		$display ("     Real value = %b", SAIDAME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_SAIDAME_exp[6] = SAIDAME_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module proj_final_16bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_inc;
reg btn_seleciona;
reg btn_troca;
reg change_pass;
reg CLK;
// wires                                               
wire B1;
wire B2;
wire C1;
wire C2;
wire [3:0] CD;
wire [3:0] CE;
wire [3:0] CMD;
wire [3:0] CME;
wire comp;
wire display_ponto1;
wire display_ponto2;
wire display_ponto3;
wire display_ponto4;
wire E1;
wire F2;
wire H1;
wire J1;
wire J2;
wire J3;
wire LOAD_COFRE;
wire [3:0] ND;
wire [3:0] NE;
wire [3:0] NMD;
wire [3:0] NME;
wire [6:0] SAIDAD;
wire [6:0] SAIDAE;
wire [6:0] SAIDAMD;
wire [6:0] SAIDAME;

wire sampler;                             

// assign statements (if any)                          
proj_final_16bits i1 (
// port map - connection between master ports and signals/registers   
	.B1(B1),
	.B2(B2),
	.btn_inc(btn_inc),
	.btn_seleciona(btn_seleciona),
	.btn_troca(btn_troca),
	.C1(C1),
	.C2(C2),
	.CD(CD),
	.CE(CE),
	.change_pass(change_pass),
	.CLK(CLK),
	.CMD(CMD),
	.CME(CME),
	.comp(comp),
	.display_ponto1(display_ponto1),
	.display_ponto2(display_ponto2),
	.display_ponto3(display_ponto3),
	.display_ponto4(display_ponto4),
	.E1(E1),
	.F2(F2),
	.H1(H1),
	.J1(J1),
	.J2(J2),
	.J3(J3),
	.LOAD_COFRE(LOAD_COFRE),
	.ND(ND),
	.NE(NE),
	.NMD(NMD),
	.NME(NME),
	.SAIDAD(SAIDAD),
	.SAIDAE(SAIDAE),
	.SAIDAMD(SAIDAMD),
	.SAIDAME(SAIDAME)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// btn_inc
initial
begin
	btn_inc = 1'b0;
end 

// btn_seleciona
initial
begin
	btn_seleciona = 1'b0;
	btn_seleciona = #220000 1'b1;
	# 20000;
	repeat(18)
	begin
		btn_seleciona = 1'b0;
		btn_seleciona = #20000 1'b1;
		# 20000;
	end
	btn_seleciona = 1'b0;
	btn_seleciona = #20000 1'b1;
	btn_seleciona = #10000 1'b0;
end 

// btn_troca
initial
begin
	btn_troca = 1'b0;
	btn_troca = #20000 1'b1;
	btn_troca = #30000 1'b0;
	btn_troca = #30000 1'b1;
	btn_troca = #30000 1'b0;
	btn_troca = #30000 1'b1;
	btn_troca = #30000 1'b0;
end 

proj_final_16bits_vlg_sample_tst tb_sample (
	.btn_inc(btn_inc),
	.btn_seleciona(btn_seleciona),
	.btn_troca(btn_troca),
	.change_pass(change_pass),
	.CLK(CLK),
	.sampler_tx(sampler)
);

proj_final_16bits_vlg_check_tst tb_out(
	.B1(B1),
	.B2(B2),
	.C1(C1),
	.C2(C2),
	.CD(CD),
	.CE(CE),
	.CMD(CMD),
	.CME(CME),
	.comp(comp),
	.display_ponto1(display_ponto1),
	.display_ponto2(display_ponto2),
	.display_ponto3(display_ponto3),
	.display_ponto4(display_ponto4),
	.E1(E1),
	.F2(F2),
	.H1(H1),
	.J1(J1),
	.J2(J2),
	.J3(J3),
	.LOAD_COFRE(LOAD_COFRE),
	.ND(ND),
	.NE(NE),
	.NMD(NMD),
	.NME(NME),
	.SAIDAD(SAIDAD),
	.SAIDAE(SAIDAE),
	.SAIDAMD(SAIDAMD),
	.SAIDAME(SAIDAME),
	.sampler_rx(sampler)
);
endmodule

