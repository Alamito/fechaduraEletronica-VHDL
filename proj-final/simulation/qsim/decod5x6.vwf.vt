// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2023 10:03:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decod5x6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod5x6_vlg_sample_tst(
	btn_left,
	btn_mid,
	btn_right,
	swi_left,
	swi_right,
	sampler_tx
);
input  btn_left;
input  btn_mid;
input  btn_right;
input  swi_left;
input  swi_right;
output sampler_tx;

reg sample;
time current_time;
always @(btn_left or btn_mid or btn_right or swi_left or swi_right)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decod5x6_vlg_check_tst (
	S00000,
	S00001,
	S00010,
	S00100,
	S01000,
	S10000,
	sampler_rx
);
input  S00000;
input  S00001;
input  S00010;
input  S00100;
input  S01000;
input  S10000;
input sampler_rx;

reg  S00000_expected;
reg  S00001_expected;
reg  S00010_expected;
reg  S00100_expected;
reg  S01000_expected;
reg  S10000_expected;

reg  S00000_prev;
reg  S00001_prev;
reg  S00010_prev;
reg  S00100_prev;
reg  S01000_prev;
reg  S10000_prev;

reg  S00000_expected_prev;
reg  S00001_expected_prev;
reg  S00010_expected_prev;
reg  S00100_expected_prev;
reg  S01000_expected_prev;
reg  S10000_expected_prev;

reg  last_S00000_exp;
reg  last_S00001_exp;
reg  last_S00010_exp;
reg  last_S00100_exp;
reg  last_S01000_exp;
reg  last_S10000_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	S00000_prev = S00000;
	S00001_prev = S00001;
	S00010_prev = S00010;
	S00100_prev = S00100;
	S01000_prev = S01000;
	S10000_prev = S10000;
end

// update expected /o prevs

always @(trigger)
begin
	S00000_expected_prev = S00000_expected;
	S00001_expected_prev = S00001_expected;
	S00010_expected_prev = S00010_expected;
	S00100_expected_prev = S00100_expected;
	S01000_expected_prev = S01000_expected;
	S10000_expected_prev = S10000_expected;
end



// expected S00000
initial
begin
	S00000_expected = 1'bX;
end 

// expected S00001
initial
begin
	S00001_expected = 1'bX;
end 

// expected S00010
initial
begin
	S00010_expected = 1'bX;
end 

// expected S00100
initial
begin
	S00100_expected = 1'bX;
end 

// expected S01000
initial
begin
	S01000_expected = 1'bX;
end 

// expected S10000
initial
begin
	S10000_expected = 1'bX;
end 
// generate trigger
always @(S00000_expected or S00000 or S00001_expected or S00001 or S00010_expected or S00010 or S00100_expected or S00100 or S01000_expected or S01000 or S10000_expected or S10000)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S00000 = %b | expected S00001 = %b | expected S00010 = %b | expected S00100 = %b | expected S01000 = %b | expected S10000 = %b | ",S00000_expected_prev,S00001_expected_prev,S00010_expected_prev,S00100_expected_prev,S01000_expected_prev,S10000_expected_prev);
	$display("| real S00000 = %b | real S00001 = %b | real S00010 = %b | real S00100 = %b | real S01000 = %b | real S10000 = %b | ",S00000_prev,S00001_prev,S00010_prev,S00100_prev,S01000_prev,S10000_prev);
`endif
	if (
		( S00000_expected_prev !== 1'bx ) && ( S00000_prev !== S00000_expected_prev )
		&& ((S00000_expected_prev !== last_S00000_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S00000 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S00000_expected_prev);
		$display ("     Real value = %b", S00000_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S00000_exp = S00000_expected_prev;
	end
	if (
		( S00001_expected_prev !== 1'bx ) && ( S00001_prev !== S00001_expected_prev )
		&& ((S00001_expected_prev !== last_S00001_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S00001 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S00001_expected_prev);
		$display ("     Real value = %b", S00001_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S00001_exp = S00001_expected_prev;
	end
	if (
		( S00010_expected_prev !== 1'bx ) && ( S00010_prev !== S00010_expected_prev )
		&& ((S00010_expected_prev !== last_S00010_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S00010 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S00010_expected_prev);
		$display ("     Real value = %b", S00010_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S00010_exp = S00010_expected_prev;
	end
	if (
		( S00100_expected_prev !== 1'bx ) && ( S00100_prev !== S00100_expected_prev )
		&& ((S00100_expected_prev !== last_S00100_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S00100 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S00100_expected_prev);
		$display ("     Real value = %b", S00100_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S00100_exp = S00100_expected_prev;
	end
	if (
		( S01000_expected_prev !== 1'bx ) && ( S01000_prev !== S01000_expected_prev )
		&& ((S01000_expected_prev !== last_S01000_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S01000 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S01000_expected_prev);
		$display ("     Real value = %b", S01000_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S01000_exp = S01000_expected_prev;
	end
	if (
		( S10000_expected_prev !== 1'bx ) && ( S10000_prev !== S10000_expected_prev )
		&& ((S10000_expected_prev !== last_S10000_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10000 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10000_expected_prev);
		$display ("     Real value = %b", S10000_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S10000_exp = S10000_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decod5x6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_left;
reg btn_mid;
reg btn_right;
reg swi_left;
reg swi_right;
// wires                                               
wire S00000;
wire S00001;
wire S00010;
wire S00100;
wire S01000;
wire S10000;

wire sampler;                             

// assign statements (if any)                          
decod5x6 i1 (
// port map - connection between master ports and signals/registers   
	.btn_left(btn_left),
	.btn_mid(btn_mid),
	.btn_right(btn_right),
	.S00000(S00000),
	.S00001(S00001),
	.S00010(S00010),
	.S00100(S00100),
	.S01000(S01000),
	.S10000(S10000),
	.swi_left(swi_left),
	.swi_right(swi_right)
);

// btn_left
initial
begin
	btn_left = 1'b0;
	btn_left = #60000 1'b1;
	btn_left = #40000 1'b0;
end 

// btn_mid
initial
begin
	btn_mid = 1'b0;
	btn_mid = #170000 1'b1;
	btn_mid = #30000 1'b0;
end 

// btn_right
initial
begin
	btn_right = 1'b0;
	btn_right = #270000 1'b1;
	btn_right = #40000 1'b0;
end 

// swi_left
initial
begin
	swi_left = 1'b0;
	swi_left = #370000 1'b1;
	swi_left = #30000 1'b0;
end 

// swi_right
initial
begin
	swi_right = 1'b0;
	swi_right = #480000 1'b1;
	swi_right = #20000 1'b0;
end 

decod5x6_vlg_sample_tst tb_sample (
	.btn_left(btn_left),
	.btn_mid(btn_mid),
	.btn_right(btn_right),
	.swi_left(swi_left),
	.swi_right(swi_right),
	.sampler_tx(sampler)
);

decod5x6_vlg_check_tst tb_out(
	.S00000(S00000),
	.S00001(S00001),
	.S00010(S00010),
	.S00100(S00100),
	.S01000(S01000),
	.S10000(S10000),
	.sampler_rx(sampler)
);
endmodule

