// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2023 11:41:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    regUser16bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regUser16bits_vlg_sample_tst(
	botaoInc,
	btn_troca,
	CLK,
	reset,
	sampler_tx
);
input  botaoInc;
input  btn_troca;
input  CLK;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(botaoInc or btn_troca or CLK or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module regUser16bits_vlg_check_tst (
	QD,
	QE,
	QMD,
	QME,
	sampler_rx
);
input [3:0] QD;
input [3:0] QE;
input [3:0] QMD;
input [3:0] QME;
input sampler_rx;

reg [3:0] QD_expected;
reg [3:0] QE_expected;
reg [3:0] QMD_expected;
reg [3:0] QME_expected;

reg [3:0] QD_prev;
reg [3:0] QE_prev;
reg [3:0] QMD_prev;
reg [3:0] QME_prev;

reg [3:0] QD_expected_prev;
reg [3:0] QE_expected_prev;
reg [3:0] QMD_expected_prev;
reg [3:0] QME_expected_prev;

reg [3:0] last_QD_exp;
reg [3:0] last_QE_exp;
reg [3:0] last_QMD_exp;
reg [3:0] last_QME_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	QD_prev = QD;
	QE_prev = QE;
	QMD_prev = QMD;
	QME_prev = QME;
end

// update expected /o prevs

always @(trigger)
begin
	QD_expected_prev = QD_expected;
	QE_expected_prev = QE_expected;
	QMD_expected_prev = QMD_expected;
	QME_expected_prev = QME_expected;
end


// expected QD[ 3 ]
initial
begin
	QD_expected[3] = 1'bX;
end 
// expected QD[ 2 ]
initial
begin
	QD_expected[2] = 1'bX;
end 
// expected QD[ 1 ]
initial
begin
	QD_expected[1] = 1'bX;
end 
// expected QD[ 0 ]
initial
begin
	QD_expected[0] = 1'bX;
end 
// expected QE[ 3 ]
initial
begin
	QE_expected[3] = 1'bX;
end 
// expected QE[ 2 ]
initial
begin
	QE_expected[2] = 1'bX;
end 
// expected QE[ 1 ]
initial
begin
	QE_expected[1] = 1'bX;
end 
// expected QE[ 0 ]
initial
begin
	QE_expected[0] = 1'bX;
end 
// expected QMD[ 3 ]
initial
begin
	QMD_expected[3] = 1'bX;
end 
// expected QMD[ 2 ]
initial
begin
	QMD_expected[2] = 1'bX;
end 
// expected QMD[ 1 ]
initial
begin
	QMD_expected[1] = 1'bX;
end 
// expected QMD[ 0 ]
initial
begin
	QMD_expected[0] = 1'bX;
end 
// expected QME[ 3 ]
initial
begin
	QME_expected[3] = 1'bX;
end 
// expected QME[ 2 ]
initial
begin
	QME_expected[2] = 1'bX;
end 
// expected QME[ 1 ]
initial
begin
	QME_expected[1] = 1'bX;
end 
// expected QME[ 0 ]
initial
begin
	QME_expected[0] = 1'bX;
end 
// generate trigger
always @(QD_expected or QD or QE_expected or QE or QMD_expected or QMD or QME_expected or QME)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected QD = %b | expected QE = %b | expected QMD = %b | expected QME = %b | ",QD_expected_prev,QE_expected_prev,QMD_expected_prev,QME_expected_prev);
	$display("| real QD = %b | real QE = %b | real QMD = %b | real QME = %b | ",QD_prev,QE_prev,QMD_prev,QME_prev);
`endif
	if (
		( QD_expected_prev[0] !== 1'bx ) && ( QD_prev[0] !== QD_expected_prev[0] )
		&& ((QD_expected_prev[0] !== last_QD_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QD_expected_prev);
		$display ("     Real value = %b", QD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QD_exp[0] = QD_expected_prev[0];
	end
	if (
		( QD_expected_prev[1] !== 1'bx ) && ( QD_prev[1] !== QD_expected_prev[1] )
		&& ((QD_expected_prev[1] !== last_QD_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QD_expected_prev);
		$display ("     Real value = %b", QD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QD_exp[1] = QD_expected_prev[1];
	end
	if (
		( QD_expected_prev[2] !== 1'bx ) && ( QD_prev[2] !== QD_expected_prev[2] )
		&& ((QD_expected_prev[2] !== last_QD_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QD_expected_prev);
		$display ("     Real value = %b", QD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QD_exp[2] = QD_expected_prev[2];
	end
	if (
		( QD_expected_prev[3] !== 1'bx ) && ( QD_prev[3] !== QD_expected_prev[3] )
		&& ((QD_expected_prev[3] !== last_QD_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QD_expected_prev);
		$display ("     Real value = %b", QD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QD_exp[3] = QD_expected_prev[3];
	end
	if (
		( QE_expected_prev[0] !== 1'bx ) && ( QE_prev[0] !== QE_expected_prev[0] )
		&& ((QE_expected_prev[0] !== last_QE_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QE_expected_prev);
		$display ("     Real value = %b", QE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QE_exp[0] = QE_expected_prev[0];
	end
	if (
		( QE_expected_prev[1] !== 1'bx ) && ( QE_prev[1] !== QE_expected_prev[1] )
		&& ((QE_expected_prev[1] !== last_QE_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QE_expected_prev);
		$display ("     Real value = %b", QE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QE_exp[1] = QE_expected_prev[1];
	end
	if (
		( QE_expected_prev[2] !== 1'bx ) && ( QE_prev[2] !== QE_expected_prev[2] )
		&& ((QE_expected_prev[2] !== last_QE_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QE_expected_prev);
		$display ("     Real value = %b", QE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QE_exp[2] = QE_expected_prev[2];
	end
	if (
		( QE_expected_prev[3] !== 1'bx ) && ( QE_prev[3] !== QE_expected_prev[3] )
		&& ((QE_expected_prev[3] !== last_QE_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QE_expected_prev);
		$display ("     Real value = %b", QE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QE_exp[3] = QE_expected_prev[3];
	end
	if (
		( QMD_expected_prev[0] !== 1'bx ) && ( QMD_prev[0] !== QMD_expected_prev[0] )
		&& ((QMD_expected_prev[0] !== last_QMD_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QMD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QMD_expected_prev);
		$display ("     Real value = %b", QMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QMD_exp[0] = QMD_expected_prev[0];
	end
	if (
		( QMD_expected_prev[1] !== 1'bx ) && ( QMD_prev[1] !== QMD_expected_prev[1] )
		&& ((QMD_expected_prev[1] !== last_QMD_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QMD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QMD_expected_prev);
		$display ("     Real value = %b", QMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QMD_exp[1] = QMD_expected_prev[1];
	end
	if (
		( QMD_expected_prev[2] !== 1'bx ) && ( QMD_prev[2] !== QMD_expected_prev[2] )
		&& ((QMD_expected_prev[2] !== last_QMD_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QMD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QMD_expected_prev);
		$display ("     Real value = %b", QMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QMD_exp[2] = QMD_expected_prev[2];
	end
	if (
		( QMD_expected_prev[3] !== 1'bx ) && ( QMD_prev[3] !== QMD_expected_prev[3] )
		&& ((QMD_expected_prev[3] !== last_QMD_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QMD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QMD_expected_prev);
		$display ("     Real value = %b", QMD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QMD_exp[3] = QMD_expected_prev[3];
	end
	if (
		( QME_expected_prev[0] !== 1'bx ) && ( QME_prev[0] !== QME_expected_prev[0] )
		&& ((QME_expected_prev[0] !== last_QME_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QME[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QME_expected_prev);
		$display ("     Real value = %b", QME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_QME_exp[0] = QME_expected_prev[0];
	end
	if (
		( QME_expected_prev[1] !== 1'bx ) && ( QME_prev[1] !== QME_expected_prev[1] )
		&& ((QME_expected_prev[1] !== last_QME_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QME[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QME_expected_prev);
		$display ("     Real value = %b", QME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_QME_exp[1] = QME_expected_prev[1];
	end
	if (
		( QME_expected_prev[2] !== 1'bx ) && ( QME_prev[2] !== QME_expected_prev[2] )
		&& ((QME_expected_prev[2] !== last_QME_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QME[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QME_expected_prev);
		$display ("     Real value = %b", QME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_QME_exp[2] = QME_expected_prev[2];
	end
	if (
		( QME_expected_prev[3] !== 1'bx ) && ( QME_prev[3] !== QME_expected_prev[3] )
		&& ((QME_expected_prev[3] !== last_QME_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QME[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QME_expected_prev);
		$display ("     Real value = %b", QME_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_QME_exp[3] = QME_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module regUser16bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botaoInc;
reg btn_troca;
reg CLK;
reg reset;
// wires                                               
wire [3:0] QD;
wire [3:0] QE;
wire [3:0] QMD;
wire [3:0] QME;

wire sampler;                             

// assign statements (if any)                          
regUser16bits i1 (
// port map - connection between master ports and signals/registers   
	.botaoInc(botaoInc),
	.btn_troca(btn_troca),
	.CLK(CLK),
	.QD(QD),
	.QE(QE),
	.QMD(QMD),
	.QME(QME),
	.reset(reset)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// botaoInc
initial
begin
	botaoInc = 1'b0;
	botaoInc = #220000 1'b1;
	# 20000;
	repeat(18)
	begin
		botaoInc = 1'b0;
		botaoInc = #20000 1'b1;
		# 20000;
	end
	botaoInc = 1'b0;
	botaoInc = #20000 1'b1;
	botaoInc = #10000 1'b0;
end 

// btn_troca
initial
begin
	btn_troca = 1'b0;
	btn_troca = #20000 1'b1;
	btn_troca = #30000 1'b0;
	btn_troca = #30000 1'b1;
	btn_troca = #30000 1'b0;
	btn_troca = #30000 1'b1;
	btn_troca = #30000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

regUser16bits_vlg_sample_tst tb_sample (
	.botaoInc(botaoInc),
	.btn_troca(btn_troca),
	.CLK(CLK),
	.reset(reset),
	.sampler_tx(sampler)
);

regUser16bits_vlg_check_tst tb_out(
	.QD(QD),
	.QE(QE),
	.QMD(QMD),
	.QME(QME),
	.sampler_rx(sampler)
);
endmodule

